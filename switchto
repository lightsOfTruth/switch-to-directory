#!/bin/bash
declare -A COLOURS
COLOURS=([SET]='\033[0m' [DARKGRAY]='\033[1;30m' [RED]='\033[0;31m' [WHITE]='\033[1;37m' [LIGHTRED]='\033[1;31m' [GREEN]='\033[0;32m' [PURPLE]='\033[0;35m' [CYAN]='\033[0;36m' [YELLOW]='\033[1;33m')
ENDCOLOR='\033[0m'
ROOT=~/

declare -A PATHS
CONFIG=/home/dev/.gotoconfig

usage() {
        cat >&2 <<END_USAGE

FLAGS:
    -h, --help                  Prints help information

OPTIONS:
        --show-paths            Show avilable paths
        [ARG]                   Enter your shortcut key for the path you would like to cd to  
END_USAGE
}

function doesFileExist() {
        if [ ! -f $1 ]; then
                echoColour RED "path ${1} does not exist"
                exit 1
        else
                echoColour GREEN "path ${1} exists"
        fi
}
# $BASH_SOURCE always contains the name/path of the script.
# $0 only contains the name/path of the script when NOT sourced.
echoColour() {
        if [ "${COLOURS[${1}]}" ]; then
                echo -e "${COLOURS[${1}]}$2${COLOURS[SET]}"
        elif [ $# -gt 1 ]; then
                echoColour WHITE "${2}"
        else
                echoColour WHITE "${1}"
        fi
}

# if [ -z "${BASH_VERSION}" ] || [ -n "${ZSH_VERSION}" ]; then
#   # shellcheck disable=SC2016
#   echoColour >&2 LIGHT RED 'Error: the install instructions explicitly say to pipe the install script to `bash`; please follow them'
#   exit 1
# fi

# Check if the config file exists and is readable
# -r: tests if the file exists and is readable by the current user
# !: negates the condition, so we're checking if the file is NOT readable
if [[ ! -r "$CONFIG" ]]; then
        echoColour RED "Error: Config file $CONFIG does not exist or is not readable."
        return 1
fi

# ( doesFileExist $CONFIG )
#                 if [[ $? -ne 0 ]]; then
#                    #echo "config file found"
#                 # else
#                         echoColour WHITE "please create a config fileh"
#                 fi

# Read the .env file and add the key-value pairs to the PATHS array
# example of a line in the .env file: HOME=/var/home
while IFS='=' read -r key value; do
        if [[ $key != "" && $value != "" ]]; then
                FULL_PATH=$(realpath "$value")
                #       echo "the full $FULL_PATH from $value"
                [[ ! -d $FULL_PATH ]] && echoColour CYAN "Skipping: Path $FULL_PATH does not exist." && continue

                PATHS[$key]=$value
        fi
done <$CONFIG

function showShortCuts() {
        printf "%-30s %-30s\n" "SHORT HAND" "PATH"
        for x in "${!PATHS[@]}"; do printf "%-30s %-30s\n" "${x}" "${PATHS[$x]}"; done
}

[[ "${#PATH[@]}" -eq 0 ]] && echoColour LIGHTRED "No paths found" && exit 1

#printf "%s\n" "${PATHS[@]@K}"
if [ "$0" = "$BASH_SOURCE" ]; then
        echoColour RED "Error: Script must be sourced.\nUse source <COMMAND>"

        exit 1
fi

# function doesPathExist () {
# # echo "entered path - $1"
#        if [ ! -d $1 ]; then
#                echoColour RED "path ${1} does not exist"
#                exit 1
#        # else
#                # echoColour GREEN "path ${1} exists"
#        fi
# }

while [ $# -gt 0 ]; do
        arg="$1"

        case "$arg" in
        -h | --help)
                usage
                shift
                return 0
                ;;
        -p | --paths)
                showShortCuts
                shift
                return 0
                ;;
        --)
                echoColour RED "unknown option: '$arg'"
                usage
                shift
                break
                ;;
        *)
                [[ $arg =~ ^- ]] && echoColour RED "unknown option: '$arg'" && usage && shift && return 1
                echo "...switching $1"
                declare -f goto >/dev/null 2>&1 || {
                        echoColour RED "function goto not found"
                        return 1
                }
                goto "$1"
                shift
                ;;
        esac
done

goto() {
        for key in "${!PATHS[@]}"; do
                if [ ${key} == $1 ]; then
                        echoColour "changing directory to ${PATHS[${key}]}"
                        cd ${PATHS[${key}]}
                fi
        done
}
